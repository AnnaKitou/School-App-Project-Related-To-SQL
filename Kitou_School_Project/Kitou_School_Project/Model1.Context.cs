//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kitou_School_Project
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Kitou_SchoolEntities : DbContext
    {
        public Kitou_SchoolEntities()
            : base("name=Kitou_SchoolEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ASSIGNMENT> ASSIGNMENTS { get; set; }
        public virtual DbSet<COURS> COURSES { get; set; }
        public virtual DbSet<STUDENT> STUDENTS { get; set; }
        public virtual DbSet<TRAINER> TRAINERS { get; set; }
        public virtual DbSet<AssignmentsPerStudentsPerCourse> AssignmentsPerStudentsPerCourses { get; set; }
        public virtual DbSet<ListOfAssignment> ListOfAssignments { get; set; }
        public virtual DbSet<ListOfCours> ListOfCourses { get; set; }
        public virtual DbSet<ListOfStudent> ListOfStudents { get; set; }
        public virtual DbSet<ListOfTrainer> ListOfTrainers { get; set; }
        public virtual DbSet<StudentsPerCourse> StudentsPerCourses { get; set; }
        public virtual DbSet<StudentsToMoreThanOneCourse> StudentsToMoreThanOneCourses { get; set; }
    
        public virtual int AssignAStudentToACourse(Nullable<int> studentId, Nullable<int> courseId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssignAStudentToACourse", studentIdParameter, courseIdParameter);
        }
    
        public virtual int InsertACourse(string title, string stream, string type, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var streamParameter = stream != null ?
                new ObjectParameter("Stream", stream) :
                new ObjectParameter("Stream", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertACourse", titleParameter, streamParameter, typeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int InsertAnAssignment(string title, string description, Nullable<System.DateTime> submission_Date, Nullable<int> oral_Mark, Nullable<int> total_Mark, Nullable<int> courseId)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var submission_DateParameter = submission_Date.HasValue ?
                new ObjectParameter("Submission_Date", submission_Date) :
                new ObjectParameter("Submission_Date", typeof(System.DateTime));
    
            var oral_MarkParameter = oral_Mark.HasValue ?
                new ObjectParameter("Oral_Mark", oral_Mark) :
                new ObjectParameter("Oral_Mark", typeof(int));
    
            var total_MarkParameter = total_Mark.HasValue ?
                new ObjectParameter("Total_Mark", total_Mark) :
                new ObjectParameter("Total_Mark", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAnAssignment", titleParameter, descriptionParameter, submission_DateParameter, oral_MarkParameter, total_MarkParameter, courseIdParameter);
        }
    
        public virtual int InsertAStudent(string firstName, string lastName, Nullable<int> tuitionFees, Nullable<System.DateTime> dateOfBirth)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var tuitionFeesParameter = tuitionFees.HasValue ?
                new ObjectParameter("TuitionFees", tuitionFees) :
                new ObjectParameter("TuitionFees", typeof(int));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAStudent", firstNameParameter, lastNameParameter, tuitionFeesParameter, dateOfBirthParameter);
        }
    
        public virtual int InsertATrainer(string firstName, string lastName, string subject, Nullable<int> coursesId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var coursesIdParameter = coursesId.HasValue ?
                new ObjectParameter("CoursesId", coursesId) :
                new ObjectParameter("CoursesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertATrainer", firstNameParameter, lastNameParameter, subjectParameter, coursesIdParameter);
        }
    }
}
